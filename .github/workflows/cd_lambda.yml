name: cd_lambda

on:
  pull_request:
    branches:
      - main
    types:
      - closed
    paths:
      - "infra/lambroll/**"
      - "infra/terraform/**"
      - "lambda/src/**"
      - "docker/lambda/Dockerfile"
      - ".github/workflows/cd_lambda.yml"
  workflow_dispatch:

env:
  PLATFORM: linux/arm64
  DOCKERFILE: docker/lambda/Dockerfile
  AWS_REGION: ap-northeast-1
  AWS_OIDC_ROLE_ARN: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/sample-lambda-cicd-dev-github-actions-oidc-role
  AWS_ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-1.amazonaws.com
  AWS_ECR_REPOSITORY: sample-lambda-cicd-dev-lambda
  AWS_SSM_NAME_IMAGE_TAG: /version/lambda/sample-lambda-cicd-dev-lambda
  LAMBROLL_FILE: infra/lambroll/function.json
  LAMBROLL_ENV_FILE: infra/lambroll/dev.env
  TFSTATE_URL: remote://app.terraform.io/RintaroooOrg/dev-lambda

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Add Mask
        run: |
          echo "::add-mask::${{ secrets.AWS_ACCOUNT_ID }}"

      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ env.PLATFORM }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_OIDC_ROLE_ARN }}

      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.AWS_ECR_REGISTRY }}

      - name: Build and push to ECR
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ env.DOCKERFILE }}
          push: true
          tags: ${{ env.AWS_ECR_REGISTRY }}/${{ env.AWS_ECR_REPOSITORY }}:${{ github.sha }}
          platforms: ${{ env.PLATFORM }}
          target: runner
          provenance: false

  deploy-lambda:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    concurrency: # prevent multiple deploy at the same time
      group: deploy-lambda-group
      cancel-in-progress: false # wait for the previous deploy to finish
    permissions:
      id-token: write
      contents: read
    env:
      TFE_TOKEN: ${{ secrets.TFE_TOKEN }}
    steps:
      - name: Add mask
        run: |
          echo "::add-mask::${{ secrets.AWS_ACCOUNT_ID }}"

      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_OIDC_ROLE_ARN }}

      - name: Set up lambroll
        uses: fujiwara/lambroll@v1
        with:
          version: v1.1.3

      - name: Update SSM parameter for image URI
        shell: bash
        run: |
          aws ssm put-parameter \
            --name ${{ env.AWS_SSM_NAME_IMAGE_TAG }} \
            --value ${{ github.sha }} \
            --type String \
            --overwrite

      - name: Run lambroll diff
        run: |
          lambroll diff \
            --function=${{ env.LAMBROLL_FILE }} \
            --envfile=${{ env.LAMBROLL_ENV_FILE }} \
            --tfstate=${{ env.TFSTATE_URL }} \
            --color

      - name: Deploy Lambda with lambroll
        run: |
          lambroll deploy \
            --function=${{ env.LAMBROLL_FILE }} \
            --envfile=${{ env.LAMBROLL_ENV_FILE }} \
            --tfstate=${{ env.TFSTATE_URL }} \
            --log-level=info
